from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy.orm import Session
from database import SessionLocal, User, Airdrop, NftBadge, encrypt_data, decrypt_data
from airdrop_parser import fetch_all_airdrops, save_airdrops_to_database
from task_executor import follow_twitter_account, join_telegram_channel, register_on_website, take_screenshot
from config import BOT_TOKEN, ADMIN_ID, FREE_USER_AIRDROP_LIMIT
import random
import string
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–ø—á–∏: {user_id: correct_answer}
CAPTCHA_CHALLENGES = {}

def generate_captcha() -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞–ø—á—É"""
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    question = f"{num1} + {num2} = ?"
    answer = str(num1 + num2)
    return question, answer

def check_user_limits(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            return True  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return user.daily_airdrops_count < FREE_USER_AIRDROP_LIMIT
    finally:
        db.close()

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=user_id,
                is_premium=False,
                rating=0,
                hunt_tokens=0.0
            )
            db.add(new_user)
            db.commit()
            
            welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Airdrop Hunter!

üîç –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∏—Ä–¥—Ä–æ–ø–æ–≤.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/airdrops - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∏—Ä–¥—Ä–æ–ø—ã
/do_airdrop <ID> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
/leaderboard - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
/my_tokens - –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã $HUNT
/subscribe - Premium –ø–æ–¥–ø–∏—Å–∫–∞

üí° –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /airdrops!
            """
        else:
            welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.rating}
‚Ä¢ –¢–æ–∫–µ–Ω—ã $HUNT: {user.hunt_tokens}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'Premium' if user.is_premium else 'Free'}

üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /airdrops –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∞–∏—Ä–¥—Ä–æ–ø–æ–≤!
            """
        
        await message.answer(welcome_text)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        db.close()

@dp.message(Command("airdrops"))
async def airdrops_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∏—Ä–¥—Ä–æ–ø—ã"""
    try:
        db = SessionLocal()
        airdrops = db.query(Airdrop).filter(Airdrop.is_moderated == True).limit(10).all()
        
        if not airdrops:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∏—Ä–¥—Ä–æ–ø–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return
        
        response = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∏—Ä–¥—Ä–æ–ø—ã:\n\n"
        for airdrop in airdrops:
            status_emoji = "‚úÖ" if airdrop.status == "completed" else "üÜï"
            response += f"{status_emoji} <b>{airdrop.title}</b>\n"
            response += f"üìù {airdrop.description[:100]}...\n"
            response += f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {airdrop.reward}\n"
            response += f"üîó <a href='{airdrop.source_url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            response += f"üéØ ID: {airdrop.id}\n\n"
        
        response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /do_airdrop <ID> –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        
        await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–æ–≤")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–æ–≤: {e}")
    finally:
        db.close()

@dp.message(Command("do_airdrop"))
async def do_airdrop_command(message: Message):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∞–∏—Ä–¥—Ä–æ–ø–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º ID –∞–∏—Ä–¥—Ä–æ–ø–∞
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–∏—Ä–¥—Ä–æ–ø–∞: /do_airdrop <ID>")
            return
        
        airdrop_id = int(args[1])
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not check_user_limits(user_id):
            await message.answer("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ Premium!")
            return
        
        db = SessionLocal()
        try:
            airdrop = db.query(Airdrop).filter(Airdrop.id == airdrop_id).first()
            
            if not airdrop:
                await message.answer("‚ùå –ê–∏—Ä–¥—Ä–æ–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if airdrop.status == "completed":
                await message.answer("‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                return
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            await message.answer(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞–Ω–∏–µ: {airdrop.title}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è
            tasks = []
            if "twitter" in airdrop.description.lower():
                tasks.append(follow_twitter_account("project_twitter"))
            if "telegram" in airdrop.description.lower():
                tasks.append(join_telegram_channel(airdrop.source_url))
            if "register" in airdrop.description.lower():
                tasks.append(register_on_website(airdrop.source_url))
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = await take_screenshot(airdrop.source_url, f"airdrop_{airdrop_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            airdrop.status = "completed"
            db.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == user_id).first()
            if user:
                user.rating += 10
                user.hunt_tokens += 5.0
                user.daily_airdrops_count += 1
                db.commit()
            
            success_message = f"""
‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!

üéÅ –ê–∏—Ä–¥—Ä–æ–ø: {airdrop.title}
üí∞ –ù–∞–≥—Ä–∞–¥–∞: {airdrop.reward}
üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path if screenshot_path else '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å'}

üéØ +10 –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞
ü™ô +5 —Ç–æ–∫–µ–Ω–æ–≤ $HUNT

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ö–æ—Ç–∏—Ç—å—Å—è –∑–∞ –∞–∏—Ä–¥—Ä–æ–ø–∞–º–∏! üöÄ
            """
            
            await message.answer(success_message)
            
        finally:
            db.close()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–∏—Ä–¥—Ä–æ–ø–∞")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∏—Ä–¥—Ä–æ–ø–∞: {e}")

@dp.message(Command("leaderboard"))
async def leaderboard_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        db = SessionLocal()
        top_users = db.query(User).order_by(User.rating.desc()).limit(10).all()
        
        response = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        for i, user in enumerate(top_users, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            response += f"{medal} {user.rating} –æ—á–∫–æ–≤ | {user.hunt_tokens} $HUNT\n"
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
    finally:
        db.close()

@dp.message(Command("my_tokens"))
async def my_tokens_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = SessionLocal()
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if user:
            response = f"""
üí∞ –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã $HUNT: {user.hunt_tokens}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {user.rating} –æ—á–∫–æ–≤
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'Premium' if user.is_premium else 'Free'}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.daily_airdrops_count}/{FREE_USER_AIRDROP_LIMIT}
            """
        else:
            response = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    finally:
        db.close()

@dp.message(Command("subscribe"))
async def subscribe_command(message: Message):
    """Premium –ø–æ–¥–ø–∏—Å–∫–∞"""
    response = """
üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞

üöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∏—Ä–¥—Ä–æ–ø—ã
‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã $HUNT

üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: $19.99/–º–µ—Å—è—Ü

üìû –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    """
    await message.answer(response)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("parse_airdrops"))
async def parse_airdrops_command(message: Message):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∞–∏—Ä–¥—Ä–æ–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∞–∏—Ä–¥—Ä–æ–ø–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        airdrops = fetch_all_airdrops()
        save_airdrops_to_database(airdrops)
        
        await message.answer(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(airdrops)} –∞–∏—Ä–¥—Ä–æ–ø–æ–≤")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Airdrop Hunter Bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 