#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è Airdrop Hunter
"""

import os
import asyncio
import requests
import tweepy
from aiogram import Bot
from config import (
    COINMARKETCAP_API_KEY, 
    TWITTER_CONSUMER_KEY, 
    TWITTER_CONSUMER_SECRET,
    TWITTER_ACCESS_TOKEN,
    TWITTER_ACCESS_TOKEN_SECRET,
    BOT_TOKEN
)

def test_coinmarketcap_api():
    """–¢–µ—Å—Ç CoinMarketCap API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CoinMarketCap API...")
    
    if COINMARKETCAP_API_KEY == "YOUR_COINMARKETCAP_API_KEY":
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/airdrops"
        headers = {
            'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY,
            'Accept': 'application/json'
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            airdrops_count = len(data.get('data', []))
            print(f"‚úÖ CoinMarketCap API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –∞–∏—Ä–¥—Ä–æ–ø–æ–≤: {airdrops_count}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CoinMarketCap API: {e}")
        return False

def test_twitter_api():
    """–¢–µ—Å—Ç Twitter API"""
    print("üê¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter API...")
    
    if not all([TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET]):
        print("‚ùå Twitter API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        auth = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
        auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
        api = tweepy.API(auth, wait_on_rate_limit=True)
        
        user = api.verify_credentials()
        print(f"‚úÖ Twitter API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{user.screen_name}")
        return True
        
    except tweepy.TweepyException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Twitter API: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Twitter API: {e}")
        return False

async def test_telegram_bot():
    """–¢–µ—Å—Ç Telegram Bot API"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot API...")
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        bot = Bot(token=BOT_TOKEN)
        me = await bot.get_me()
        print(f"‚úÖ Telegram Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç: @{me.username}")
        await bot.session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram Bot API: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import SessionLocal, init_db
        from sqlalchemy import text
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_selenium():
    """–¢–µ—Å—Ç Selenium"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Selenium...")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        
        driver = webdriver.Chrome(options=options)
        driver.get("https://www.google.com")
        title = driver.title
        driver.quit()
        
        print(f"‚úÖ Selenium —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {title}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Selenium: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...\n")
    
    results = {
        "CoinMarketCap": test_coinmarketcap_api(),
        "Twitter": test_twitter_api(),
        "Telegram": await test_telegram_bot(),
        "Database": test_database(),
        "Selenium": test_selenium()
    }
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 40)
    
    working_apis = 0
    for api_name, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {api_name}")
        if status:
            working_apis += 1
    
    print("=" * 40)
    print(f"üéØ –†–∞–±–æ—Ç–∞–µ—Ç API: {working_apis}/{len(results)}")
    
    if working_apis == len(results):
        print("üéâ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    elif working_apis > 0:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main()) 