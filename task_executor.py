import requests
from typing import List, Dict
from database import SessionLocal, Airdrop
from config import SELENIUM_WEBDRIVER_PATH, SCREENSHOTS_DIR, TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET

import tweepy
import os
import undetected_chromedriver as uc
from selenium.webdriver.chrome.options import Options
import datetime

def init_twitter_api():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitter API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    try:
        if not all([TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET]):
            print("‚ö†Ô∏è Twitter API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None
            
        auth = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
        auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
        api = tweepy.API(auth, wait_on_rate_limit=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user = api.verify_credentials()
        print(f"‚úÖ Twitter API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.screen_name}")
        return api
    except tweepy.TweepyException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Twitter API: {e}")
        return None

twitter_api = init_twitter_api()

async def follow_twitter_account(username: str) -> bool:
    """–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç"""
    if not twitter_api:
        print("‚ùå Twitter API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.replace('@', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = twitter_api.get_user(screen_name=username)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        twitter_api.create_friendship(screen_name=username)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{username}")
        return True
        
    except tweepy.TweepyException as e:
        if "already requested" in str(e).lower():
            print(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{username}")
            return True
        elif "already following" in str(e).lower():
            print(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{username}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ @{username}: {e}")
            return False

async def retweet_post(tweet_id: str) -> bool:
    """–†–µ—Ç–≤–∏—Ç–Ω—É—Ç—å –ø–æ—Å—Ç"""
    if not twitter_api:
        return False
    
    try:
        twitter_api.retweet(tweet_id)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–µ—Ç–≤–∏—Ç–Ω—É–ª–∏ –ø–æ—Å—Ç {tweet_id}")
        return True
    except tweepy.TweepyException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ç–≤–∏—Ç–µ: {e}")
        return False

async def like_post(tweet_id: str) -> bool:
    """–õ–∞–π–∫–Ω—É—Ç—å –ø–æ—Å—Ç"""
    if not twitter_api:
        return False
    
    try:
        twitter_api.create_favorite(tweet_id)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç {tweet_id}")
        return True
    except tweepy.TweepyException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ: {e}")
        return False

async def join_telegram_channel(channel_link: str) -> bool:
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram Bot API
    # –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–µ–µ.
    print(f"üì± –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª: {channel_link}")
    return True

async def register_on_website(url: str, username: str = "test_user", email: str = "test@example.com", password: str = "TestPassword123!") -> bool:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ Selenium"""
    print(f"üåê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ: {url}")
    driver = None
    try:
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        driver = uc.Chrome(options=options, executable_path=SELENIUM_WEBDRIVER_PATH)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        driver.get(url)
        driver.implicitly_wait(10)

        # –ò—â–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            email_field = driver.find_element("xpath", "//input[@type='email' or contains(@placeholder, 'email') or contains(@name, 'email')]")
            password_field = driver.find_element("xpath", "//input[@type='password']")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            email_field.send_keys(email)
            password_field.send_keys(password)
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            submit_button = driver.find_element("xpath", "//button[contains(text(), 'Register') or contains(text(), 'Sign up') or contains(text(), 'Join')]")
            submit_button.click()
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ {url}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ {url}: {e}")
        return False
    finally:
        if driver:
            driver.quit()

async def take_screenshot(url: str, filename: str) -> str | None:
    """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print(f"üì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {url}")
    driver = None
    try:
        os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--window-size=1920,1080')

        driver = uc.Chrome(options=options, executable_path=SELENIUM_WEBDRIVER_PATH)
        driver.get(url)
        driver.implicitly_wait(5)

        filepath = os.path.join(SCREENSHOTS_DIR, f"{filename}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.png")
        driver.save_screenshot(filepath)
        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ {url}: {e}")
        return None
    finally:
        if driver:
            driver.quit() 